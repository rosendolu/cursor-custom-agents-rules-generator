# üîß Node.js Version Management Guidelines

## Critical Rules

- üìã Version Detection Priority
  - MUST check version in following order:
    1. `.nvmrc` file in project root
    2. `engines.node` field in `package.json`
    3. Default to latest LTS if neither exists

- üîí Version Enforcement
  - Enforce exact Node.js version match with `.nvmrc`
  - Use `>=` in package.json engines field for minimum version requirement
  - Document Node.js version requirements in project README.md
  - Add version check in project's start/build scripts

- üöÄ Feature Compatibility
  - Only use JavaScript features supported by specified Node.js version
  - Document any version-specific features in code comments
  - Include polyfills for features not available in target Node.js version
  - Test application in both minimum and latest supported Node.js versions

- ‚öôÔ∏è Development Environment
  - Use `nvm` or similar tool for version management
  - Set up CI/CD to test against specified Node.js version
  - Include version check in development setup scripts
  - Document version switching instructions in README.md

## Examples

<example>
  # Valid Project Setup Example
  
  # .nvmrc
  18.19.0

  # package.json
  {
    "name": "my-project",
    "engines": {
      "node": ">=18.19.0"
    },
    "scripts": {
      "prestart": "node scripts/check-node-version.js",
      "start": "node index.js"
    }
  }

  # scripts/check-node-version.js
  const semver = require('semver');
  const { engines } = require('./package.json');
  const version = engines.node;
  
  if (!semver.satisfies(process.version, version)) {
    console.error(
      `Required node version ${version} not satisfied with current version ${process.version}.`
    );
    process.exit(1);
  }

  # README.md
  ## Requirements
  - Node.js version: 18.19.0 (LTS)
  - Use `nvm use` to automatically switch to the correct version
</example>

<example type="invalid">
  # Invalid Project Setup Example
  
  # Missing .nvmrc file
  
  # package.json (‚ùå Incorrect version specification)
  {
    "name": "my-project",
    "engines": {
      "node": "18.19.0"  // ‚ùå Using exact version instead of >=
    },
    "scripts": {
      "start": "node index.js"  // ‚ùå No version check
    }
  }

  # index.js (‚ùå Using features without version check)
  // Using features without checking Node.js version compatibility
  const { fetch } = globalThis;  // ‚ùå No version check or polyfill
  
  // ‚ùå No documentation about version requirements
  const data = await fetch('https://api.example.com/data');
  
  // ‚ùå Using new features without fallback
  const config = structuredClone(defaultConfig);
</example> 